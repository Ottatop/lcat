WHITESPACE = _{ " " | "\t" }

ident   = @{ (LETTER | "_") ~ (LETTER | ASCII_DIGIT | "_")* | varargs }
varargs =  { "..." }

str_lit               = @{ double_quoted_str_lit | single_quoted_str_lit }
double_quoted_str_lit =  { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
single_quoted_str_lit =  { "'" ~ (!"'" ~ ANY)* ~ "'" }

int_lit = @{ ASCII_DIGIT+ }

// Second ident is ? because LuaLS allows types to be named like That...thing..
type_ident = @{ ident ~ ("." ~ ident?)* }

rest_of_line = { ANY+ }

// Types

ty = { single_type ~ ("|" ~ single_type)* ~ nullable? }

single_type = {
    (function_def | table_def | tuple_def | str_lit | int_lit | type_ident | "(" ~ ty ~ ")") ~ generics? ~ array?
}

function_def     = { "fun" ~ "(" ~ function_args? ~ ")" ~ function_returns? }
function_args    = { function_arg ~ ("," ~ function_arg)* ~ ","? }
function_arg     = { ident ~ nullable? ~ (":" ~ ty)? }
function_returns = { ":" ~ function_return ~ ("," ~ function_return)* }
function_return  = { ident ~ ":" ~ ty | ty }

table_def    = { "{" ~ table_fields? ~ "}" }
table_fields = { table_field ~ (("," | ";") ~ table_field)* ~ ("," | ";")? }
table_field  = { ("[" ~ ty ~ "]" | ident) ~ nullable? ~ ":" ~ ty }

tuple_def = { "[" ~ ty ~ ("," ~ ty)* ~ ","? ~ "]" }

generics = { "<" ~ ty ~ ("," ~ ty)* ~ ","? ~ ">" }

nullable = { "?" }
array    = { "[]" }

// Annotations
// lcat will strip the @annotation when parsing

// ---@class [(exact)] <name>[: <parent>]
class       = { class_exact? ~ type_ident ~ (":" ~ ty)? }
class_exact = { "(" ~ "exact" ~ ")" }

// ---@field [scope] <name[?]> <type> [description]
// or
// ---@field [scope] [<type>] <type> [description]
field       = { field_scope? ~ ("[" ~ #field_ty = ty ~ "]" | ident ~ nullable?) ~ ty ~ ("#" | "--")? ~ rest_of_line? }
field_scope = { "public" | "private" | "protected" | "package" }

// ---@alias <name> <type>
// or
// ---@alias <name>
// ---| '<value>' [# description]
alias                 = { type_ident ~ ty? ~ rest_of_line? }
alias_additional_type = { ty ~ ("#" | "--")? ~ rest_of_line? }

// ---@param <name[?]> <type[|type...]> [description]
param = { ident ~ nullable? ~ ty ~ ("#" | "--")? ~ rest_of_line? }
// ---@return <type> [<name> [comment] | [name] #<comment>]
ret = { ty ~ (("#" | "--" | ident?)? ~ rest_of_line?)? }

// ---@enum [(key)] <name>
_enum    = { enum_key? ~ type_ident ~ rest_of_line? }
enum_key = { "(" ~ "key" ~ ")" }

type_annotation = { ty ~ rest_of_line? }

see = { type_ident ~ rest_of_line? }

annotation = { "@" ~ ident ~ rest_of_line? }
piped_line = { "|" ~ rest_of_line? }
